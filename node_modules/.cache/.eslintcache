[{"/home/priyanka/Documents/wakefit/src/index.js":"1","/home/priyanka/Documents/wakefit/src/App.js":"2","/home/priyanka/Documents/wakefit/src/reportWebVitals.js":"3","/home/priyanka/Documents/wakefit/src/ShoppingCart/CartList.js":"4"},{"size":500,"mtime":1621954057100,"results":"5","hashOfConfig":"6"},{"size":241,"mtime":1621958110559,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1621954057100,"results":"8","hashOfConfig":"6"},{"size":3623,"mtime":1621969067886,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"nvvb4j",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"/home/priyanka/Documents/wakefit/src/index.js",[],"/home/priyanka/Documents/wakefit/src/App.js",[],"/home/priyanka/Documents/wakefit/src/reportWebVitals.js",[],"/home/priyanka/Documents/wakefit/src/ShoppingCart/CartList.js",["19","20","21"],"import React, { useEffect, useState } from \"react\";\nimport cartData from \"./components/CartData.json\";\nimport style from \"./CartList.module.css\";\n\nexport const CartList = () => {\n  const [items, setItems] = useState([]);\n  const [totalPrice, setTotalPrice] = useState(0);\n\n  useEffect(() => {\n    if (items.length) {\n      return;\n    }\n    let total = 0;\n    cartData.map((data) => {\n      data.discountNo = ((data.mrp * data.discount) / 100).toFixed();\n      data.total = data.mrp - data.discountNo;\n      total += data.total;\n    });\n    setTotalPrice(total);\n    setItems([...cartData]);\n  });\n\n  const handleQtyChange = (value, item) => {\n    const data = [...items];\n    let total = totalPrice;\n    data.forEach((itm) => {\n      if (itm.id === item.id) {\n        itm.mrp = (itm.mrp / itm.qty) * value.target.value;\n        itm.qty = value.target.value;\n        itm.discountNo = ((itm.mrp * itm.discount) / 100).toFixed();\n        total -= itm.total;\n        itm.total = itm.mrp - itm.discountNo;\n        total += itm.total;\n      }\n    });\n    setTotalPrice(total);\n    setItems([...data]);\n  };\n\n  const handleDeleteItem = (item) => {\n    const data = [...items];\n    let total = totalPrice;\n    const cartitem = data.find((a) => a.id === item.id);\n    total -= cartitem.total;\n    data.splice(\n      data.findIndex((a) => a.id === item.id),\n      1\n    );\n    setTotalPrice(total);\n    setItems([...data]);\n  };\n\n  return (\n    <>\n      <span\n        className={style.itemInfo}\n      >{`You currently have ${items.length} items(s) in your cart`}</span>\n      <table className={style.table}>\n        <thead>\n          <tr>\n            <th>Product</th>\n            <th>Quantity</th>\n            <th>\n              MRP<sub>(per Unit)</sub>\n            </th>\n            <th>Discount</th>\n            <th>Total</th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {items.map((item) => (\n            <tr>\n              <td>\n                <div className={style.productDisplay}>\n                  <div>\n                    <img className={style.mattress} src={item.thumbnail} />\n                  </div>\n                  <div className={style.productInfo}>\n                    <div>{item.title}</div>\n                    <div\n                      className={style.subText}\n                    >{`${item.skucode} - ${item.name}`}</div>\n                  </div>\n                </div>\n              </td>\n              <td>\n                <select\n                  name=\"qty\"\n                  id=\"qty\"\n                  className={style.quantity}\n                  onChange={(value) => handleQtyChange(value, item)}\n                >\n                  <option value={1}>1</option>\n                  <option value={2}>2</option>\n                  <option value={3}>3</option>\n                  <option value={4}>4</option>\n                  <option value={5}>5</option>\n                </select>\n              </td>\n              <td>&#8377; {item.mrp}</td>\n              <td>\n                <div>&#8377; {item.discountNo}</div>\n                <div className={style.subText}>{`(${item.discount}%)`}</div>\n              </td>\n              <td>&#8377; {item.total}</td>\n              <td>\n                <button\n                  className={style.deleteButton}\n                  onClick={() => handleDeleteItem(item)}\n                >\n                  <i class=\"fa fa-trash\"></i>\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <h3 className={style.totalCount}>Total &#8377; {`${totalPrice}`}</h3>\n    </>\n  );\n};\n",{"ruleId":"22","severity":1,"message":"23","line":9,"column":3,"nodeType":"24","endLine":9,"endColumn":12,"suggestions":"25"},{"ruleId":"26","severity":1,"message":"27","line":14,"column":25,"nodeType":"28","messageId":"29","endLine":14,"endColumn":27},{"ruleId":"30","severity":1,"message":"31","line":77,"column":21,"nodeType":"32","endLine":77,"endColumn":76},"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setTotalPrice'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [items.length] as a second argument to the useEffect Hook.","Identifier",["33"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"34","fix":"35"},"Add dependencies array: [items.length]",{"range":"36","text":"37"},[595,595],", [items.length]"]